import { useState, type ChangeEvent, type FC, type FormEvent } from "react";
import { useDiary } from "../Context/DiaryContext";
import type { CloseType } from "../types";
import '../Styles/Diary.css'

export const Diary: FC = () => {
    const { addDeal } = useDiary();
    const [errors, setErrors] = useState<Record<string, string>>({});
    const [isSubmitting, setIsSubmitting] = useState(false);

    const [newDeal, setNewDeal] = useState({
        date: new Date().toISOString().split('T')[0],
        instrument: '',
        openPrice: '',
        closePrice: '',
        commission: '',
        stopLoss: '',
        takeProfit: '',
        reason: '',
        emotions: '',
        closeType: 'none' as CloseType,
        images: []
    });

    const validateForm = () => {
        const newErrors: Record<string, string> = {};
        
        if (!newDeal.instrument.trim()) {
            newErrors.instrument = '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
        }
        
        if (!newDeal.openPrice || Number(newDeal.openPrice) <= 0) {
            newErrors.openPrice = '–¶–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0';
        }
        
        if (!newDeal.closePrice || Number(newDeal.closePrice) <= 0) {
            newErrors.closePrice = '–¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0';
        }
        
        if (Number(newDeal.openPrice) > 0 && Number(newDeal.closePrice) > 0) {
            if (Number(newDeal.stopLoss) > Number(newDeal.openPrice)) {
                newErrors.stopLoss = '–°—Ç–æ–ø-–ª–æ—Å—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã—à–µ —Ü–µ–Ω—ã –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–ª—è –ª–æ–Ω–≥–∞';
            }
            
            if (Number(newDeal.takeProfit) < Number(newDeal.openPrice)) {
                newErrors.takeProfit = '–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∏–∂–µ —Ü–µ–Ω—ã –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–ª—è –ª–æ–Ω–≥–∞';
            }
        }
        
        if (!newDeal.reason.trim()) {
            newErrors.reason = '–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –≤—Ö–æ–¥–∞';
        }
        
        if (!newDeal.emotions.trim()) {
            newErrors.emotions = '–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ —ç–º–æ—Ü–∏–∏';
        }
        
        if (newDeal.closeType === 'none') {
            newErrors.closeType = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–∫—Ä—ã—Ç–∏—è';
        }
        
        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    const handleChange = (e: ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target;
        setNewDeal(prev => ({
            ...prev,
            [name]: value
        }));
        if (errors[name]) {
            setErrors(prev => ({
                ...prev,
                [name]: ''
            }));
        }
    };

    const handleSubmit = async (e: FormEvent) => {
        e.preventDefault();
        
        if (!validateForm()) return;
        
        setIsSubmitting(true);
        
        try {
            await addDeal({
                date: newDeal.date,
                instrument: newDeal.instrument.trim(),
                openPrice: Number(newDeal.openPrice) || 0,
                closePrice: Number(newDeal.closePrice) || 0,
                commission: Number(newDeal.commission) || 0,
                stopLoss: Number(newDeal.stopLoss) || 0,
                takeProfit: Number(newDeal.takeProfit) || 0,
                reason: newDeal.reason.trim(),
                emotions: newDeal.emotions.trim(),
                closeType: newDeal.closeType,
                images: newDeal.images
            });
     
            setNewDeal({
                date: new Date().toISOString().split('T')[0],
                instrument: '',
                openPrice: '',
                closePrice: '',
                commission: '',
                stopLoss: '',
                takeProfit: '',
                reason: '',
                emotions: '',
                closeType: 'none',
                images: []
            });
            
            setErrors({});
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏:', error);
        } finally {
            setIsSubmitting(false);
        }
    };

    const calculateProfit = () => {
        if (!newDeal.openPrice || !newDeal.closePrice) return 0;
        const open = Number(newDeal.openPrice);
        const close = Number(newDeal.closePrice);
        return (close - open).toFixed(2);
    };

    const profit = calculateProfit();
    const isProfit = Number(profit) > 0;

    return (
        <section className="diary-form"> 
            <div className="form-header">
                <h2>üìä –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏</h2>
                <div className={`profit-preview ${isProfit ? 'positive' : 'negative'}`}>
                    –ü—Ä–∏–±—ã–ª—å: {profit}$
                </div>
            </div>
            
            <form onSubmit={handleSubmit}>
                <div className="form-row">
                    <label className={errors.date ? 'error' : ''}>
                        –î–∞—Ç–∞:
                        <input 
                            type="date"
                            name="date"
                            value={newDeal.date}
                            onChange={handleChange}
                            required
                        />
                        {errors.date && <span className="error-text">{errors.date}</span>}
                    </label>

                    <label className={errors.instrument ? 'error' : ''}>
                        –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:
                        <input 
                            type="text"
                            name="instrument"
                            value={newDeal.instrument}
                            onChange={handleChange}
                            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: AAPL, BTC/USD"
                            required
                        />
                        {errors.instrument && <span className="error-text">{errors.instrument}</span>}
                    </label>
                </div>

                <div className="form-row">
                    <label className={errors.openPrice ? 'error' : ''}>
                        –¶–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è:
                        <input 
                            type="number"
                            name="openPrice"
                            value={newDeal.openPrice}
                            onChange={handleChange}
                            placeholder="0.00"
                            step="0.0001"
                            min="0"
                            required
                        />
                        {errors.openPrice && <span className="error-text">{errors.openPrice}</span>}
                    </label>

                    <label className={errors.closePrice ? 'error' : ''}>
                        –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è:
                        <input 
                            type="number"
                            name="closePrice"
                            value={newDeal.closePrice}
                            onChange={handleChange}
                            placeholder="0.00"
                            step="0.0001"
                            min="0"
                            required
                        />
                        {errors.closePrice && <span className="error-text">{errors.closePrice}</span>}
                    </label>
                </div>

                <div className="form-row">
                    <label>
                        –ö–æ–º–∏—Å—Å–∏—è:
                        <input 
                            type="number"
                            name="commission"
                            value={newDeal.commission}
                            onChange={handleChange}
                            placeholder="0.00"
                            step="0.01"
                            min="0"
                        />
                    </label>

                    <label className={errors.closeType ? 'error' : ''}>
                        –¢–∏–ø –∑–∞–∫—Ä—ã—Ç–∏—è:
                        <select 
                            name="closeType" 
                            value={newDeal.closeType} 
                            onChange={handleChange}
                        >
                            <option value="none">–ù–µ –≤—ã–±—Ä–∞–Ω–æ</option>
                            <option value="profit">–ó–∞–∫—Ä—ã–ª–∞—Å—å –ø–æ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—É</option>
                            <option value="loss">–ó–∞–∫—Ä—ã–ª–∞—Å—å –ø–æ –°—Ç–æ–ø-–õ–æ—Å—Å—É</option>
                            <option value="zero">–ë–µ–∑—É–±—ã—Ç–æ–∫</option>
                            <option value="manually">–í—Ä—É—á–Ω—É—é</option>
                        </select>
                        {errors.closeType && <span className="error-text">{errors.closeType}</span>}
                    </label>
                </div>

                <div className="form-row">
                    <label className={errors.stopLoss ? 'error' : ''}>
                        –°—Ç–æ–ø-–ª–æ—Å—Å:
                        <input 
                            type="number"
                            name="stopLoss"
                            value={newDeal.stopLoss}
                            onChange={handleChange}
                            placeholder="0.00"
                            step="0.0001"
                            min="0"
                        />
                        {errors.stopLoss && <span className="error-text">{errors.stopLoss}</span>}
                    </label>

                    <label className={errors.takeProfit ? 'error' : ''}>
                        –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç:
                        <input 
                            type="number"
                            name="takeProfit"
                            value={newDeal.takeProfit}
                            onChange={handleChange}
                            placeholder="0.00"
                            step="0.0001"
                            min="0"
                        />
                        {errors.takeProfit && <span className="error-text">{errors.takeProfit}</span>}
                    </label>
                </div>

                <label className={errors.reason ? 'error' : ''}>
                    –ü—Ä–∏—á–∏–Ω–∞ –≤—Ö–æ–¥–∞ –≤ —Å–¥–µ–ª–∫—É:
                    <textarea
                        name="reason"
                        value={newDeal.reason}
                        onChange={handleChange}
                        placeholder="–û–ø–∏—à–∏—Ç–µ –ø–æ—á–µ–º—É –≤—ã –≤–æ—à–ª–∏ –≤ —Å–¥–µ–ª–∫—É..."
                        rows={3}
                        required
                    />
                    {errors.reason && <span className="error-text">{errors.reason}</span>}
                </label>

                <label className={errors.emotions ? 'error' : ''}>
                    –≠–º–æ—Ü–∏–∏ –≤–æ –≤—Ä–µ–º—è —Å–¥–µ–ª–∫–∏:
                    <textarea
                        name="emotions"
                        value={newDeal.emotions}
                        onChange={handleChange}
                        placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ —ç–º–æ—Ü–∏–∏ –≤–æ –≤—Ä–µ–º—è —Å–¥–µ–ª–∫–∏..."
                        rows={3}
                        required
                    />
                    {errors.emotions && <span className="error-text">{errors.emotions}</span>}
                </label>

                <button 
                    type="submit" 
                    disabled={isSubmitting}
                    className={isSubmitting ? 'submitting' : ''}
                >
                    {isSubmitting ? '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ...' : '‚úÖ –î–æ–±–∞–≤–∏—Ç—å —Å–¥–µ–ª–∫—É'}
                </button>
            </form>
        </section>
    );
};